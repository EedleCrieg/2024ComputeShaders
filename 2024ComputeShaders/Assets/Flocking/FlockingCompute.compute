// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Boid{
    float3 position; 
    float3 direction; 
}; 

//RWTexture2D<float4> Result;
RWStructuredBuffer<Boid> boidsBuffer; 

float time; 
float deltaTime; 

float rotationSpeed; 
float boidSpeed; 
float boidSpeedVariation; 
float3 flockPosition;
float neighborDist; 
int boidsCount; 
float3 target; 
float3 repellent; 


[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Boid boid = boidsBuffer[id.x]; 
    
    float3 seperation = 0; 
    float3 alignment = 0; 
    float3 cohesion = flockPosition; 

    uint nearbyCount = 1; 

    for(int i = 0; i < boidsCount; i++)
    {
        if( i != int(id.x)){
            Boid tempBoid = boidsBuffer[i]; 
            if(distance(boid.position, tempBoid.position)< neighborDist)
            {
                float3 offset = boid.position - tempBoid.position; 
                float dist = length(offset); 
                if(dist < neighborDist){
                    dist = max(dist, 0.000001);
                    seperation += offset * (1.0/dist - 1.0/neighborDist);  
                }
                alignment += tempBoid.direction; 
                cohesion += tempBoid.position; 
                nearbyCount ++; 
            }
        }
    }

    float avg = 1.0/nearbyCount; 
    alignment *= avg; 
    cohesion *= avg; 
    cohesion = normalize(cohesion - boid.position - target + repellent); 

    float3 direction = alignment + seperation + cohesion ; 

    boid.direction = lerp(direction, normalize(boid.direction), 0.94); 
    boid.position += boid.direction * boidSpeed * deltaTime; 

    boidsBuffer[id.x] = boid; 

    
}
