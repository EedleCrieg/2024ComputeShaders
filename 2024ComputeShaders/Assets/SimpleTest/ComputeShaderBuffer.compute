// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel Clear

float time;
float speed; 
RWStructuredBuffer<float3> Result; 

float random(float value, float seed = 0.546){
    float res = frac(sin(value + seed) * 143758.5453); 
    return res; 
}

float3 random3(float value){
    return float3(
        random(value, 3.9812),
        random(value, 7.1536),
        random(value, 5.7241)
    ); 
}

[numthreads (64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    /*
    float sinDir = normalize(random3(id.x) - 0.5); 
    float3 vec = normalize(random3(id.x + 7.1393) - 0.5); 
    float3 cosDir = normalize(cross(sinDir, vec)); 

    float scaledTime = time * 0.5 + random(id.x) * 0.131234; 
    
    float3 pos = sinDir * sin(scaledTime ) + cosDir * cos(scaledTime); 
    */

    float x = cos(id.x + time * speed * random(id.x) * random(id.x)); 
    float y = sin(id.x + time * speed * random(id.x) * random(id.x)) * cos((id.x + time * speed * random(id.x)) * random(id.x)); 
    float z = sin(id.x + time * speed * random(id.x) * random(id.x)) * sin((id.x + time * speed * random(id.x)) * random(id.x)); 
    float3 pos =  float3(x, y, z ); 

    Result[id.x] = pos; 

}

[numthreads (8,8,1)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    
}